# Core Exception (transversal a nivel de todo el proyecto)
common.exception.error.historical.entity.notfound=Error invoking the historical service for the entity: {0}
common.exception.error.enum.message.notfound=Message not found for key: {0}
common.exception.entity.noexists=The requested entity does not exist or has been removed.

# USER STATE
user.state.active=User active
user.state.disabled=User disabled
state.icompleteperfil= User icomplete perfil

# CRUD USER
user.creation.exit=Create user: {0}, {1}

# CRUD PERSON
person.firstname=Primer nombre
person.middlename=Segundo nombre
person.lastName=Primer Apellido
person.middlelastname=Segundo Apellido

# EXCEPTION
functional.user.notfound=The user with id {0} does not exist in the system
functional.user.create.nofound=El servicio solicitado no pudo ser encontrado. Por favor, verifica los detalles e intenta nuevamente.

# ROLE
role.security.systemadmin=System Administrator - Has full control over the system, including user and configuration management. Reserved for a limited number of users.
role.security.securityadmin=Security Administrator - Manages roles, permissions, and security policies. Does not have access to operational data.
role.security.appadmin=Application Administrator - Responsible for application functionality management without access to security settings.
role.security.auditor=Auditor - Read-only access to monitor and audit system activities for compliance and security purposes.
role.security.user=Regular User - Standard user role with access to basic application functionalities based on assigned permissions.

# PERMISISSION
permission.create.entity=Allows creating an entity
permission.view.entity=Allows viewing an entity
permission.update.entity=Allows updating an entity
permission.delete.entity=Allows deleting an entity
permission.create.user=Allows creating a user profile
permission.view.user=Allows viewing own user profile
permission.delete.user=Allows deleting own user profile
permission.update.user=Allows updating own user profile

#User validations
functional.user.email.exists=The email address already exists in the system

#Person:
functional.person.notfound="The person with id {0} does not exist in the system"

# Validation messages for Person entity
validation.person.iduser.notnull=User ID cannot be null.
validation.person.iduser.notfound=The user does not exist in the database.
validation.person.firstname.notnull=First name cannot be null.
validation.person.lastname.notnull=Last name cannot be null.